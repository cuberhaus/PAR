#!/bin/bash

#SBATCH --job-name=submit-strong-omp.sh
#SBATCH -D .
#SBATCH --output=submit-strong-omp.sh.o%j
#SBATCH --error=submit-strong-omp.sh.e%j

HOST=$(echo $HOSTNAME | cut -f 1 -d'.')

if [ ${HOST} = 'boada-6' ] || [ ${HOST} = 'boada-7' ] || [ ${HOST} == 'boada-8' ]
then
    echo "Use sbatch to execute this script"
    exit 0
fi

SEQ=multisort-seq
PROG=multisort-omp
size=32768
sort_size=1024
merge_size=1024
cutoff=50
USUARIO=`whoami`
FECHA=`date`
np_NMIN=1
np_NMAX=20
N=3

# Make sure that all binaries exist
make $SEQ
make $PROG

out=/tmp/out.$$	    # Temporal file where you save the execution results
aux=/tmp/aux.$$     # archivo auxiliar

outputpath1=./speedup1-${HOST}.txt
outputpath2=./speedup2-${HOST}.txt
outputpath3=./elapsed1-${HOST}.txt
outputpath4=./elapsed2-${HOST}.txt
rm -rf $outputpath1 2> /dev/null
rm -rf $outputpath2 2> /dev/null
rm -rf $outputpath3 2> /dev/null
rm -rf $outputpath4 2> /dev/null

export KMP_AFFINITY=scatter

echo Executing $SEQ sequentially
min_elapsed=1000  # Minimo del elapsed time de las N ejecuciones del programa
min_partial=1000  # Minimo del multisort time de las N ejecuciones del programa
i=0        # Variable contador de repeticiones
while (test $i -lt $N)
	do
		echo -n Run $i...
        /usr/bin/time --format=%e ./$SEQ -n $size -s $sort_size -m $merge_size > $out 2>$aux
        time1=`cat $aux|tail -n 1`
        time2=`cat $out|tail -n 4  | grep "Multisort execution time"| cut -d':' -f 2`
		echo Elapsed time = $time1
		echo Partial time = $time2

        st=`echo "$time1 < $min_elapsed" | bc`
        if [ $st -eq 1 ]; then
           min_elapsed=$time1
        fi
        st=`echo "$time2 < $min_partial" | bc`
        if [ $st -eq 1 ]; then
           min_partial=$time2
        fi

		rm -f $out
        rm -f $aux
		i=`expr $i + 1`
	done
echo -n ELAPSED TIME MIN OF $N EXECUTIONS =
sequential1=`echo $min_elapsed`
echo $sequential1
echo
echo -n MULTISORT TIME MIN OF $N EXECUTIONS =
sequential2=`echo $min_partial`
echo $sequential2
echo

echo "$PROG $np_NMIN $np_NMAX $N"

i=0
export OMP_WAIT_POLICY="passive"
echo "Starting OpenMP executions..."

PARS=$np_NMIN
while (test $PARS -le $np_NMAX)
do
	echo Executing $PROG with $PARS threads
    min_elapsed=1000  # Minimo del elapsed time de las N ejecuciones del programa
    min_partial=1000  # Minimo del multisort time de las N ejecuciones del programa

	while (test $i -lt $N)
		do
			echo -n Run $i...
            export OMP_NUM_THREADS=$PARS
            /usr/bin/time --format=%e ./$PROG -n $size -s $sort_size -m $merge_size -c $cutoff > $out 2>$aux
            time1=`cat $aux|tail -n 1`
            time2=`cat $out|tail -n 4  | grep "Multisort execution time"| cut -d':' -f 2`
		    echo Elapsed time = $time1
		    echo Partial time = $time2
            st=`echo "$time1 < $min_elapsed" | bc`
            if [ $st -eq 1 ]; then
               min_elapsed=$time1
            fi
            st=`echo "$time2 < $min_partial" | bc`
            if [ $st -eq 1 ]; then
              min_partial=$time2
            fi

			rm -f $out
            rm -f $aux
			i=`expr $i + 1`
		done

	echo -n ELAPSED TIME MIN OF $N EXECUTIONS =

    min1=`echo $min_elapsed`
    result1=`echo $sequential1/$min1|bc -l`
    echo $min1
	echo
    echo -n MULTISORT TIME MIN OF $N EXECUTIONS =
    min2=`echo $min_partial`
    result2=`echo $sequential2/$min2|bc -l`
    echo $min2
    echo
	i=0

    	#output PARS i speedup en fichero speedup1
	echo -n $PARS  >> $outputpath1
	echo -n "   "  >> $outputpath1
    echo $result1  >> $outputpath1

    	#output PARS i speedup en fichero speedup2
	echo -n $PARS  >> $outputpath2
	echo -n "   "  >> $outputpath2
    echo $result2  >> $outputpath2

    	#output PARS i speedup en fichero elapsed1
	echo -n $PARS  >> $outputpath3
	echo -n "   "  >> $outputpath3
    echo $min1     >> $outputpath3

    	#output PARS i speedup en fichero elapsed2
	echo -n $PARS  >> $outputpath4
	echo -n "   "  >> $outputpath4
    echo $min2     >> $outputpath4


    	#incrementa el parametre
	PARS=`expr $PARS + 1`
done

echo "Resultat de l'experiment (tambe es troben a " $outputpath1 " , " $outputpath2 " ," $outputpath3 " i " $outputpath4 " )"
echo "#threads	Speedup (global)"
cat $outputpath1
echo
echo "#threads	Speedup (partial)"
cat $outputpath2
echo
echo "#threads	Min Elapsed Time (global)"
cat $outputpath3
echo
echo "#threads	Min Elapsed Time (global)"
cat $outputpath4
echo

cp .strong-omp.jgr strong-omp-${HOST}.jgr
sed -i -e "s/HHH/${HOST}/g" strong-omp-${HOST}.jgr
sed -i -e "s/UUU/${USUARIO}/g" strong-omp-${HOST}.jgr
sed -i -e "s/FFF/Generated by ${USUARIO} on ${FECHA}/g" strong-omp-${HOST}.jgr
PSFILE=strong-$PROG-$size-$sort_size-$cutoff-$np_NMIN-$np_NMAX-$N-${HOST}.ps
jgraph -P strong-omp-${HOST}.jgr > $PSFILE
rm strong-omp-${HOST}.jgr
mv $outputpath1 ./speedup-global-$PROG-$size-$sort_size-$cutoff-$HOST.txt
mv $outputpath2 ./speedup-partial-$PROG-$size-$sort_size-$cutoff-$HOST.txt
mv $outputpath3 ./elapsed-global-$PROG-$size-$sort_size-$cutoff-$HOST.txt
mv $outputpath4 ./elapsed-partial-$PROG-$size-$sort_size-$cutoff-$HOST.txt

